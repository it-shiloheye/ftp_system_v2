// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db_access

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type FileStatusType string

const (
	FileStatusTypeNew     FileStatusType = "new"
	FileStatusTypeShared  FileStatusType = "shared"
	FileStatusTypeDeleted FileStatusType = "deleted"
)

func (e *FileStatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FileStatusType(s)
	case string:
		*e = FileStatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for FileStatusType: %T", src)
	}
	return nil
}

type NullFileStatusType struct {
	FileStatusType FileStatusType `json:"file_status_type"`
	Valid          bool           `json:"valid"` // Valid is true if FileStatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFileStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.FileStatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FileStatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFileStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FileStatusType), nil
}

type FileStorage struct {
	ID               int32              `json:"id"`
	PeerID           uuid.UUID          `json:"peer_id"`
	FileName         string             `json:"file_name"`
	FilePath         string             `json:"file_path"`
	FileType         string             `json:"file_type"`
	FileHash         pgtype.Text        `json:"file_hash"`
	PrevFileHash     pgtype.Text        `json:"prev_file_hash"`
	Creation         pgtype.Timestamptz `json:"creation"`
	ModificationDate pgtype.Timestamp   `json:"modification_date"`
	FileState        NullFileStatusType `json:"file_state"`
	FileData         interface{}        `json:"file_data"`
}

type PeersTable struct {
	ID        int32       `json:"id"`
	PeerID    pgtype.UUID `json:"peer_id"`
	IpAddress string      `json:"ip_address"`
}
